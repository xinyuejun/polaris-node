#!/usr/bin/env node

/**
 * Module dependencies.
 */

const path = require('path')
const fs = require('fs')
const debug = require('debug')('polaris-node:server')
const http = require('http')
const mongoose = require('mongoose')
const config = require('../config')

/**
 * mongoose
 */

mongoose.connect(config.MONGODB_DB, { useNewUrlParser:true }, (err) => {
  if (err) {
      console.error('connect to %s error: ', config.MONGODB_DB, err.message)
      process.exit(1)
  }
})


// 初始化数据
const modelPath = path.join(__dirname, '../model')
fs.readdirSync(modelPath).forEach(file => {
  if(/(.*)\.(js$|coffee$)/.test(file)) {
    require(`${modelPath}/${file}`)
  }
})

// mongoose promise
mongoose.Promise = global.Promise


/**
 * Get port from environment and store in Express.
 */

const app = require('../app')
const port = normalizePort(process.env.EXPRESS_PORT || '9000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
